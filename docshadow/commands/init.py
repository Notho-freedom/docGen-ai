"""
docShadow init command - Initialize docShadow in a Git repository
"""

import json
import os
import shutil
import stat
from pathlib import Path
import click

from ..utils import ensure_git_repo, copy_gitignore_to_docignore


def init_command():
    """
    Initialize docShadow in the current Git repository.
    
    Creates:
    - docshadow.config.json
    - .docignore (copy of .gitignore)
    - .docshadow/ directory
    - Installs post-commit Git hook
    """
    try:
        # Ensure we're in a Git repository
        if not ensure_git_repo():
            click.echo("‚ùå Error: Not in a Git repository. Run 'git init' first.", err=True)
            return False
            
        # Check if already initialized
        if Path("docshadow.config.json").exists():
            click.echo("‚ö†Ô∏è  docShadow already initialized in this repository.")
            if not click.confirm("Reinitialize?"):
                return False
        
        click.echo("üöÄ Initializing docShadow...")
        
        # 1. Create docshadow.config.json
        config = {
            "project_name": Path.cwd().name,
            "languages": ["python"],
            "output_dir": ".docshadow/",
            "hooks": {
                "post_commit": True
            },
            "ignore": ".docignore"
        }
        
        with open("docshadow.config.json", "w", encoding="utf-8") as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        click.echo("‚úÖ Created docshadow.config.json")
        
        # 2. Create .docignore from .gitignore
        copy_gitignore_to_docignore()
        click.echo("‚úÖ Created .docignore")
        
        # 3. Create .docshadow/ directory structure
        docshadow_dir = Path(".docshadow")
        docshadow_dir.mkdir(exist_ok=True)
        click.echo("‚úÖ Created .docshadow/ directory")
        
        # 4. Install Git hook
        install_git_hook()
        click.echo("‚úÖ Installed post-commit Git hook")
        
        # 5. Update .gitignore to exclude .docshadow if not already there
        add_to_gitignore()
        
        click.echo()
        click.echo("üéâ docShadow initialized successfully!")
        click.echo("üìù Documentation will be generated automatically on each commit.")
        click.echo("üîß You can run 'doc generate' to create documentation manually.")
        
        return True
        
    except Exception as e:
        click.echo(f"‚ùå Error during initialization: {e}", err=True)
        return False


def install_git_hook():
    """Install the post-commit Git hook."""
    hooks_dir = Path(".git/hooks")
    hook_file = hooks_dir / "post-commit"
    
    # Create the hook script content
    hook_content = '''#!/bin/sh
# docShadow post-commit hook
# Auto-generated by docShadow CLI

# Check if docShadow is initialized
if [ ! -f "docshadow.config.json" ]; then
    exit 0
fi

# Get the current commit hash
COMMIT_HASH=$(git rev-parse HEAD)

# Run docShadow generation
doc generate --commit "$COMMIT_HASH"
'''
    
    # Write the hook file
    with open(hook_file, "w", encoding="utf-8") as f:
        f.write(hook_content)
    
    # Make it executable
    current_permissions = os.stat(hook_file)
    os.chmod(hook_file, current_permissions.st_mode | stat.S_IEXEC)


def add_to_gitignore():
    """Add .docshadow/ to .gitignore if not already present."""
    gitignore_path = Path(".gitignore")
    docshadow_entry = ".docshadow/"
    
    # Read current .gitignore
    if gitignore_path.exists():
        with open(gitignore_path, "r", encoding="utf-8") as f:
            content = f.read()
        
        # Check if .docshadow/ is already ignored
        if docshadow_entry not in content:
            with open(gitignore_path, "a", encoding="utf-8") as f:
                f.write(f"\n# docShadow generated documentation\n{docshadow_entry}\n")
            click.echo("‚úÖ Added .docshadow/ to .gitignore")
    else:
        # Create .gitignore with .docshadow/ entry
        with open(gitignore_path, "w", encoding="utf-8") as f:
            f.write(f"# docShadow generated documentation\n{docshadow_entry}\n")
        click.echo("‚úÖ Created .gitignore with .docshadow/ entry") 